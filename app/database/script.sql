-- Limpeza de tipos e tabelas existentes para garantir a execução limpa do script
DROP FUNCTION IF EXISTS update_updated_at_column();
DROP TABLE IF EXISTS classifications CASCADE;
DROP TABLE IF EXISTS partnumbers CASCADE;
DROP TABLE IF EXISTS manufacturers CASCADE;
DROP TABLE IF EXISTS tipi CASCADE;
DROP TABLE IF EXISTS tasks CASCADE;
DROP TABLE IF EXISTS users CASCADE;
DROP TYPE IF EXISTS user_role CASCADE;
DROP TYPE IF EXISTS classification_status CASCADE;
DROP TYPE IF EXISTS task_status CASCADE;


-- =============================================
-- Criação dos tipos ENUM customizados
-- =============================================
CREATE TYPE user_role AS ENUM ('ADMIN', 'USER', 'GUEST');
CREATE TYPE classification_status AS ENUM ('ACTIVE', 'REPLACED', 'REJECTED');
CREATE TYPE task_status AS ENUM ('STARTED', 'PROCESSING', 'FAILED', 'DONE');


-- =============================================
-- Função de Trigger para atualizar o campo updated_at
-- =============================================
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updated_at = NOW();
   RETURN NEW;
END;
$$ language 'plpgsql';


-- =============================================
-- Tabela para o modelo User (usuários)
-- =============================================
CREATE TABLE users (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(120) NOT NULL,
    email VARCHAR(120) NOT NULL UNIQUE,
    password_hash VARCHAR(128) NOT NULL,
    role user_role NOT NULL DEFAULT 'USER',
    jwt_token_hash VARCHAR(256),
    admin_id INTEGER,
    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_user_admin FOREIGN KEY (admin_id) REFERENCES users (id) ON DELETE SET NULL
);

CREATE TRIGGER update_users_updated_at
BEFORE UPDATE ON users
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();


-- =============================================
-- Tabela para o modelo Task (tarefas)
-- =============================================
CREATE TABLE tasks (
    id VARCHAR(256) PRIMARY KEY,
    job_id VARCHAR(256),
    room_id VARCHAR(256),
    progress_channel VARCHAR(256),
    status task_status NOT NULL DEFAULT 'STARTED',
    current INTEGER,
    total INTEGER,
    message VARCHAR(256),
    user_id INTEGER,
    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_task_user FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE SET NULL
);

CREATE TRIGGER update_tasks_updated_at
BEFORE UPDATE ON tasks
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();


-- =============================================
-- Tabela para o modelo Manufacturer (fabricantes)
-- =============================================
CREATE TABLE manufacturers (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "name" VARCHAR(255) NOT NULL,
    address VARCHAR(255),
    country VARCHAR(100),
    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT uq_manufacturer_name_country UNIQUE ("name", country)
);

CREATE TRIGGER update_manufacturers_updated_at
BEFORE UPDATE ON manufacturers
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();


-- =============================================
-- Tabela para o modelo Tipi (tabela TIPI)
-- =============================================
CREATE TABLE tipi (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    ncm VARCHAR(10) NOT NULL,
    ex VARCHAR(4),
    description TEXT,
    tax NUMERIC(6, 2),
    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT uq_tipi_ncm_ex UNIQUE (ncm, ex)
);

CREATE TRIGGER update_tipi_updated_at
BEFORE UPDATE ON tipi
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();


-- =============================================
-- Tabela para o modelo Partnumber
-- =============================================
CREATE TABLE partnumbers (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    code VARCHAR(255) NOT NULL UNIQUE,
    best_classification_id INTEGER,
    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP
    -- A chave estrangeira para `best_classification_id` será adicionada após a criação da tabela `classifications`
);

CREATE TRIGGER update_partnumbers_updated_at
BEFORE UPDATE ON partnumbers
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();


-- =============================================
-- Tabela para o modelo Classification (classificações)
-- =============================================
CREATE TABLE classifications (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    partnumber_id INTEGER,
    task_id VARCHAR(256),
    tipi_id INTEGER,
    manufacturer_id INTEGER,
    short_description VARCHAR(256),
    long_description TEXT,
    status classification_status DEFAULT 'ACTIVE',
    confidence_rate NUMERIC(4, 3),
    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_classification_partnumber FOREIGN KEY (partnumber_id) REFERENCES partnumbers (id) ON DELETE CASCADE,
    CONSTRAINT fk_classification_task FOREIGN KEY (task_id) REFERENCES tasks (id) ON DELETE SET NULL,
    CONSTRAINT fk_classification_tipi FOREIGN KEY (tipi_id) REFERENCES tipi (id) ON DELETE SET NULL,
    CONSTRAINT fk_classification_manufacturer FOREIGN KEY (manufacturer_id) REFERENCES manufacturers (id) ON DELETE SET NULL
);

CREATE TRIGGER update_classifications_updated_at
BEFORE UPDATE ON classifications
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();


-- =======================================================================================
-- Adição da chave estrangeira pendente na tabela "partnumbers"
-- Isso resolve a dependência circular entre partnumbers e classifications
-- =======================================================================================
ALTER TABLE partnumbers
ADD CONSTRAINT fk_partnumber_best_classification
FOREIGN KEY (best_classification_id)
REFERENCES classifications (id)
ON DELETE SET NULL;