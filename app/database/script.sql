-- =================================================================
-- Script de Criação do Banco de Dados - Projeto NEXA
-- Gerado a partir dos modelos SQLAlchemy
-- =================================================================


DROP FUNCTION IF EXISTS update_updated_at_column() CASCADE;

DROP TABLE IF EXISTS
    role_permissions,
    classifications,
    partnumbers,
    manufacturers,
    tipi,
    ncms,
    tasks,
    users,
    permissions,
    roles
CASCADE;

DROP TYPE IF EXISTS classification_status CASCADE;
DROP TYPE IF EXISTS task_status CASCADE;


CREATE TYPE classification_status AS ENUM ('ACTIVE', 'REPLACED', 'REJECTED');
CREATE TYPE task_status AS ENUM ('STARTED', 'PROCESSING', 'FAILED', 'DONE');


CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE TABLE roles (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(80) NOT NULL UNIQUE
);


CREATE TABLE permissions (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(100) NOT NULL UNIQUE
);



CREATE TABLE role_permissions (
    role_id INTEGER NOT NULL REFERENCES roles(id) ON DELETE CASCADE,
    permission_id INTEGER NOT NULL REFERENCES permissions(id) ON DELETE CASCADE,
    PRIMARY KEY (role_id, permission_id)
);


CREATE TABLE users (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(120) NOT NULL,
    email VARCHAR(120) NOT NULL UNIQUE,
    password_hash VARCHAR(128) NOT NULL,
    role_id INTEGER NOT NULL REFERENCES roles(id),
    jwt_token_hash VARCHAR(256),
    admin_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TRIGGER update_users_updated_at
BEFORE UPDATE ON users
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();


CREATE TABLE tasks (
    id VARCHAR(256) PRIMARY KEY,
    job_id VARCHAR(256),
    room_id VARCHAR(256),
    progress_channel VARCHAR(256),
    status task_status NOT NULL DEFAULT 'STARTED',
    current INTEGER,
    total INTEGER,
    message VARCHAR(256),
    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TRIGGER update_tasks_updated_at
BEFORE UPDATE ON tasks
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();


CREATE TABLE manufacturers (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(255) NOT NULL,
    address VARCHAR(255),
    country VARCHAR(100),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    CONSTRAINT uq_manufacturer_name_country UNIQUE (name, country)
);

CREATE TRIGGER update_manufacturers_updated_at
BEFORE UPDATE ON manufacturers
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();


CREATE TABLE partnumbers (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    code VARCHAR(255) NOT NULL UNIQUE,
    best_classification_id INTEGER UNIQUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TRIGGER update_partnumbers_updated_at
BEFORE UPDATE ON partnumbers
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();


CREATE TABLE ncms (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    code VARCHAR(10) NOT NULL UNIQUE,
    description TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TRIGGER update_ncms_updated_at
BEFORE UPDATE ON ncms
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();


CREATE TABLE tipi (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    ncm_id INTEGER NOT NULL REFERENCES ncms(id) ON DELETE CASCADE,
    ex VARCHAR(4),
    description TEXT,
    tax NUMERIC(6, 2),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    CONSTRAINT uq_tipi_ncm_id_ex UNIQUE (ncm_id, ex)
);

CREATE TRIGGER update_tipi_updated_at
BEFORE UPDATE ON tipi
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();


CREATE TABLE classifications (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    partnumber_id INTEGER NOT NULL REFERENCES partnumbers(id) ON DELETE CASCADE,
    task_id VARCHAR(256) REFERENCES tasks(id) ON DELETE SET NULL,
    tipi_id INTEGER REFERENCES tipi(id) ON DELETE SET NULL,
    manufacturer_id INTEGER REFERENCES manufacturers(id) ON DELETE SET NULL,
    created_by_user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE SET NULL,
    short_description VARCHAR(256),
    long_description TEXT,
    status classification_status DEFAULT 'ACTIVE',
    confidence_rate NUMERIC(4, 3),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    CONSTRAINT chk_confidence_rate CHECK (confidence_rate >= 0 AND confidence_rate <= 1)
);

CREATE TRIGGER update_classifications_updated_at
BEFORE UPDATE ON classifications
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();


-- =============================================
-- Adição de Chave Estrangeira Adiavel (Deferred)
-- =============================================
ALTER TABLE partnumbers
ADD CONSTRAINT fk_partnumber_best_classification
FOREIGN KEY (best_classification_id)
REFERENCES classifications (id)
ON DELETE SET NULL
DEFERRABLE INITIALLY DEFERRED;


-- =============================================
-- Adição de Índices para Performance
-- =============================================
CREATE INDEX IF NOT EXISTS idx_classifications_created_by_user_id ON classifications (created_by_user_id);
CREATE INDEX IF NOT EXISTS idx_tasks_user_id ON tasks (user_id);
CREATE INDEX IF NOT EXISTS idx_users_admin_id ON users (admin_id);
CREATE INDEX IF NOT EXISTS idx_tipi_ncm_id ON tipi (ncm_id);